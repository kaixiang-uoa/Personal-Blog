# GitHub Actions workflow for building and pushing Docker image to Docker Hub
# Triggers on push to main branch and manual dispatch
name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    paths:
      - 'Back-end/**'
      - '.github/workflows/docker-publish.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Back-end/**'
  workflow_dispatch:

env:
  # Docker Hub repository name
  DOCKER_HUB_REPO: kxzhang220/blog-backend
  # Docker image tag strategy
  IMAGE_TAG: latest

jobs:
  # Job 1: Build and test the Docker image
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: ./Back-end
        file: ./Back-end/Dockerfile
        push: false
        tags: blog-backend-test:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Create test environment file
        cat > ./Back-end/.env.test << EOF
        NODE_ENV=production
        PORT=3002
        MONGODB_URI=mongodb://localhost:27017/blogdb-test
        JWT_SECRET=test-jwt-secret-key-for-github-actions
        CORS_ORIGIN=http://localhost:3000,http://localhost:3001
        AWS_ACCESS_KEY_ID=test-access-key
        AWS_SECRET_ACCESS_KEY=test-secret-key
        AWS_S3_BUCKET=test-bucket
        AWS_REGION=us-east-1
        EOF
        
        # Create a custom network for better container communication
        docker network create test-network
        
        # Start MongoDB for testing
        docker run -d --name mongo-test --network test-network -p 27017:27017 mongo:6.0
        
        # Wait for MongoDB to be ready
        sleep 10
        
        # Update MongoDB URI to use container name
        sed -i 's/MONGODB_URI=mongodb:\/\/localhost:27017\/blogdb-test/MONGODB_URI=mongodb:\/\/mongo-test:27017\/blogdb-test/' ./Back-end/.env.test
        
        # Run the application container
        docker run -d --name app-test \
          --network test-network \
          -p 3002:3002 \
          --env-file ./Back-end/.env.test \
          blog-backend-test:latest
        
        # Wait for application to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:3002/api/v1/health || exit 1
        
        # Cleanup
        docker stop app-test mongo-test || true
        docker rm app-test mongo-test || true

  # Job 2: Push to Docker Hub (only on main branch)
  push-to-dockerhub:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_HUB_REPO }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Back-end
        file: ./Back-end/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Image digest
      run: echo ${{ steps.build.outputs.digest }}

  # Job 3: Notify deployment status
  notify:
    needs: [build-and-test, push-to-dockerhub]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.push-to-dockerhub.result == 'success'
      run: |
        echo "✅ Docker image successfully built and pushed to Docker Hub!"
        echo "🐳 Image: ${{ env.DOCKER_HUB_REPO }}:latest"
        echo "🚀 Ready for deployment on Oracle Cloud!"
        
    - name: Notify failure
      if: needs.build-and-test.result == 'failure' || needs.push-to-dockerhub.result == 'failure'
      run: |
        echo "❌ Build or push failed!"
        echo "Please check the logs and fix the issues."
        exit 1