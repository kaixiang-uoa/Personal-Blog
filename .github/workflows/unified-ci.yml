name: Unified CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Frontend Code Quality
  frontend-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: Front-end/package-lock.json

      - name: Install Frontend dependencies
        run: npm ci
        working-directory: ./Front-end

      - name: Check Frontend code formatting
        run: npm run format:check
        working-directory: ./Front-end

      - name: Run Frontend ESLint
        run: npm run lint
        working-directory: ./Front-end

      - name: Run Frontend TypeScript check
        run: npx tsc --noEmit
        working-directory: ./Front-end

      - name: Run Frontend tests
        run: npm test
        working-directory: ./Front-end

      - name: Build Frontend application
        run: npm run build
        working-directory: ./Front-end

      - name: Frontend Security Audit
        run: npm audit --audit-level=low
        working-directory: ./Front-end

  # Admin Panel Code Quality
  admin-panel-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: admin-panel/package-lock.json

      - name: Install Admin Panel dependencies
        run: npm ci
        working-directory: ./admin-panel

      - name: Check Admin Panel code formatting
        run: npm run format:check
        working-directory: ./admin-panel

      - name: Run Admin Panel ESLint
        run: npm run lint
        working-directory: ./admin-panel

      - name: Run Admin Panel TypeScript check
        run: npx tsc --noEmit
        working-directory: ./admin-panel

      - name: Run Admin Panel tests
        run: npm test
        working-directory: ./admin-panel

      - name: Build Admin Panel application
        run: npm run build
        working-directory: ./admin-panel

      - name: Admin Panel Security Audit
        run: npm audit --audit-level=moderate
        working-directory: ./admin-panel

  # Backend Code Quality
  backend-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: Back-end/package-lock.json

      - name: Install Backend dependencies
        run: npm ci
        working-directory: ./Back-end

      - name: Run Backend ESLint
        run: npm run lint
        working-directory: ./Back-end

      - name: Run Backend tests
        run: npm test
        working-directory: ./Back-end

      - name: Backend Security Audit
        run: npm audit --audit-level=moderate
        working-directory: ./Back-end

  # Docker Build and Test (Backend)
  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v5
        with:
          context: ./Back-end
          file: ./Back-end/Dockerfile
          push: false
          tags: blog-backend-test:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Create test environment file
          cat > ./Back-end/.env.test << EOF
          NODE_ENV=production
          PORT=3002
          MONGODB_URI=mongodb://mongo-test:27017/blogdb-test
          JWT_SECRET=test-jwt-secret-key-for-github-actions-minimum-32-chars
          JWT_EXPIRE=7d
          CORS_ORIGIN=http://localhost:3000,http://localhost:3001
          AWS_ACCESS_KEY_ID=test-access-key
          AWS_SECRET_ACCESS_KEY=test-secret-key
          AWS_S3_BUCKET=test-bucket
          AWS_REGION=us-east-1
          EOF

          # Create network and start MongoDB
          docker network create test-network || true
          docker run -d --name mongo-test --network test-network -p 27017:27017 mongo:6.0 || true
          sleep 10

          # Run application container
          docker run -d --name app-test \
            --network test-network \
            -p 3002:3002 \
            --env-file ./Back-end/.env.test \
            blog-backend-test:latest || true

          sleep 15

          # Test health endpoint
          curl -f http://localhost:3002/api/v1/health || exit 1

          # Cleanup
          docker stop app-test mongo-test || true
          docker rm app-test mongo-test || true

  # Deploy to Vercel (Frontend)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [frontend-quality]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci
        working-directory: ./Front-end

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./Front-end
          vercel-args: "--prod"
          alias-domains: |
            your-frontend-domain.vercel.app

  # Deploy Admin Panel to Vercel
  deploy-admin-panel:
    runs-on: ubuntu-latest
    needs: [admin-panel-quality]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm ci
        working-directory: ./admin-panel

      - name: Deploy Admin Panel to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_ADMIN_PROJECT_ID }}
          working-directory: ./admin-panel
          vercel-args: "--prod"
          alias-domains: |
            your-admin-domain.vercel.app

  # Push to Docker Hub (Backend)
  push-dockerhub:
    runs-on: ubuntu-latest
    needs: [backend-quality, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Back-end
          file: ./Back-end/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_REPO }}:latest,${{ secrets.DOCKER_HUB_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
