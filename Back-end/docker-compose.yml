# Personal Blog Backend - Docker Compose Configuration
# Simplifies Docker deployment and management

version: '3.8'

services:
  # Backend API service
  blog-backend:
    # Build configuration
    build:
      context: .
      dockerfile: Dockerfile
    
    # Image name
    image: blog-backend:latest
    
    # Container name
    container_name: blog-backend-app
    
    # Port mapping
    ports:
      - "3002:3002"
    
    # Environment variables file
    env_file:
      - .env.docker
    
    # Restart policy
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3002, path: '/api/v1/health', timeout: 2000 }; const req = http.request(options, (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }); req.on('error', () => process.exit(1)); req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Volume mapping (optional: for persistent upload files)
    volumes:
      - ./uploads:/app/uploads
    
    # Network configuration
    networks:
      - blog-network
    
    # Service dependencies (if using local MongoDB)
    # depends_on:
    #   - mongodb
  
  # Local MongoDB service (optional, if not using cloud database)
  # mongodb:
  #   image: mongo:6.0
  #   container_name: blog-mongodb
  #   restart: unless-stopped
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: password
  #     MONGO_INITDB_DATABASE: blog
  #   volumes:
  #     - mongodb_data:/data/db
  #   networks:
  #     - blog-network

# Network configuration
networks:
  blog-network:
    driver: bridge

# Volume configuration (if using local MongoDB)
# volumes:
#   mongodb_data: