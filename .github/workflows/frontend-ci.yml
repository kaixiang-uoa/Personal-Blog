name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./Front-end

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './Front-end/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}


  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
    
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: ./Front-end

      - name: Build project (Next.js)
        run: npm run build
        working-directory: ./Front-end
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Pull Vercel Project Settings
        run: npx vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }}
        working-directory: ./Front-end
        env:
            VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
            VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      

      - name: Patch Vercel Settings to use npm
        run: |
          echo '{
            "orgId": "'"$VERCEL_ORG_ID"'",
            "projectId": "'"$VERCEL_PROJECT_ID"'",
            "settings": {
              "installCommand": "npm install",
              "buildCommand": "npm run build",
              "outputDirectory": ".vercel/output"
            }
          }' > .vercel/project.json
        working-directory: ./Front-end
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}


      - name: Generate Prebuilt Output
        run: npx vercel build --token ${{ secrets.VERCEL_TOKEN }}
        working-directory: ./Front-end

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./Front-end
          vercel-args: '--prod --prebuilt'
