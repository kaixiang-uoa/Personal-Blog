name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
        working-directory: ./Front-end

      - name: Clean exisiting .vercel config
        run: rm -rf .vercel
        working-directory: ./Front-end

      - name: Pull Vercel Project Settings
        run: npx vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }}
        working-directory: ./Front-end
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}


      - name: Show .vercel contents
        run: cat .vercel/project.json || echo "No project.json"
        working-directory: ./Front-end

      - name: Patch Vercel Settings
        run: |
          echo '{
            "orgId": "'"$VERCEL_ORG_ID"'",
            "projectId": "'"$VERCEL_PROJECT_ID"'",
            "settings": {
              "installCommand": "npm install",
              "buildCommand": "npm run build"
            }
          }' > .vercel/project.json
        working-directory: ./Front-end
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Print .vercel/project.json
        run: cat .vercel/project.json
        working-directory: ./Front-end

      - name: Build Prebuilt Output
        run: npx vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}
        working-directory: ./Front-end
      


      - name: Deploy Prebuilt Output
        run: npx vercel deploy --prebuilt --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
